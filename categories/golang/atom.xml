<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Hamo's]]></title>
  <link href="http://blog.hamobai.com/categories/golang/atom.xml" rel="self"/>
  <link href="http://blog.hamobai.com/"/>
  <updated>2014-09-13T18:34:08+08:00</updated>
  <id>http://blog.hamobai.com/</id>
  <author>
    <name><![CDATA[Yang Bai]]></name>
    <email><![CDATA[hamo.by@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker源码分析3-daemon启动（API）]]></title>
    <link href="http://blog.hamobai.com/2014/09/12/docker-analysis-3/"/>
    <updated>2014-09-12T17:30:00+08:00</updated>
    <id>http://blog.hamobai.com/2014/09/12/docker-analysis-3</id>
    <content type="html"><![CDATA[<p>在该系列的
<a href="http://blog.hamobai.com/2014/08/29/docker-analysis-2/">上一篇文章</a>中，
 我们介绍了Docker daemon启动流程的前半部分，后半部分的代码会完成daemon
 启动中最重要的两个步骤：</p>

<ul>
<li>Daemon结构的初始化</li>
<li>API的初始化</li>
</ul>


<p>在这篇文章中，我们将首先分析API初始化相关的代码，其利用Golang标准库
 &ldquo;net/http&#8221;生成一个RESTful的HTTP接口与client通信。</p>

<!--more-->


<p>上一篇文章中，我们介绍了Docker daemon能执行的动作都是封装在其engine之
 中的，那么具体如何执行这些动作呢？这里就需要engine.Job接口。其代码位于
 <code>$SRC/engine/job.go</code>。</p>

<p>job struct的定义如下：</p>

<pre><code class="go">type Job struct {
    Eng     *Engine
    Name    string
    Args    []string
    env     *Env
    Stdout  *Output
    Stderr  *Output
    Stdin   *Input
    handler Handler
    status  Status
    end     time.Time
}
</code></pre>

<p>从Job结构封装的内容不难看出，Job的设计想法来自于Unit进程：每个Job包含
自己的名字，调用的参数，执行的环境变量，标准输入、输出、错误流以及执行
状态。这里不再详细展开介绍Job的实现，有兴趣的读者可以自行研究。</p>

<p>回到API的初始化。之前我们介绍过，<code>builtins.Register()</code>会向
engine中注册serveapi命令，其对应的handler为apiserver.ServeApi。该命令
会完成API的初始化工作。</p>

<p>首先，以命令名&#8221;serveapi&#8221;及其参数（监听地址）调用<code>engine.Job()</code>函数，
 会返回指向该命令的Job结构。之后我们会根据命令行参数中指定的对API的选项，
 如是否启用tls等设置Job的环境变量。在这些工作都完成后，调用
 <code>Job.Run()</code>函数将实际调用&#8221;serveapi&#8221;对应的handler。</p>

<p>当然，<code>Job.Run()</code>并非简单调用handler，其还会处理与任务同步，日志与
 状态等相关的工作，有兴趣的同学可以自行阅读<code>Job.Run()</code>的代码。下面
 我们直接进入到handler <code>apiserver.ServeApi</code>，其代码位于
 <code>$SRC/api/server/server.go</code>。</p>

<p>对于daemon来说，Docker支持绑定多个监听地址，他们通过Job的args传递，格
式为<code>PROTO://ADDR</code>。Docker支持3种PROTO，分别是tcp,unix和fd，分别对
应tcp连接，unix socket和systemd fd。不失一般性的，我们将以unix socket
为例继续后面的代码分析，有兴趣的同学可以自己研究下另外两种proto的代码。</p>

<p>ServeApi首先会初始化<code>activationLock chan</code>。上篇文章中我们
 介绍了API的初始化分为两个部分，第一部分是今天我们介绍的&#8221;serveapi&#8221;命令，
 另一部分是在daemon结构初始化完成后调用的&#8221;acceptconnections&#8221;命令，其作
 用是令初始化完成的API可以接受连接。而这个名为&#8221;activationLock&#8221;的
 chan就是实现API初始化与接受连接分离的关键。同时，Docker实现了
 <code>listenbuffer</code>package，通过包装Golang标准库<code>net</code>来实现对
 延迟接受连接的支持。<code>listenbuffer</code>package的代码位于
 <code>$SRC/pkg/listenbuffer/buffer.go</code>。在实际调用<code>net.Accpet()</code>接
 受连接之前，会首先从管道<code>activationLock chan</code>中进行读取操作，该操
 作会立即被阻塞（因为管道还没有被写入），直到管道有写入操作或者管道被
 关闭。写入或者关闭的区别在于，如果是写入操作，那么必须写入N次才能唤醒
 N个读取操作，而关闭管道将唤醒所有阻塞在该管道的读取操作。说到这里，读
 者不难想到&#8221;acceptconnections&#8221;命令的具体作用，对，他会调用
 <code>close(activationLock)</code>从而将所有阻塞在<code>activationLock
 chan</code>的函数唤醒，进而实际调用<code>net.Accept()</code>开始接受连接。</p>

<p>API的初始化工作在<code>ListenAndServe</code>函数中完成。首先是生成router。
router即从HTTP方法和URL到对应的handle函数的映射。Docker包含一组
Profiler API，只在打开DEBUG模式时才有<code>AttachProfiler</code>函数添加到
router中。Docker主要的API router在<code>createRouter</code>函数中生成。这里利
用了gorilla/mux库，好处是：1. <code>mux.Router</code>兼容<code>http.Handler</code>接
口，可以直接作为handler传入<code>http.Server</code>；2. <code>mux.Vars</code>函数可
以将单次连接中的router变量生成<code>map[string]string</code>，方便在handler函
数中获取。</p>

<p>router生成之后，会利用它和之前传递的监听地址来初始化<code>http.Server</code>，
并调用<code>http.Serve</code>函数传入之前生成的<code>Listenbuffer</code>。这样，
daemon的API便初始化完成。在运行&#8221;acceptconnections&#8221;命令之后，daemon的
API便可接受外部连接来响应client的请求了。</p>

<p>在<a href="http://blog.hamobai.com/2014/09/20/docker-analysis-4/">下一篇文章</a>
中，我们将开始介绍Docker daemon最重要的Daemon结构的初始化，它包含了
docker网桥、containers repo、images graph、volumes graph、repository
list以及execDriver等的初始化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker源码分析2-daemon启动]]></title>
    <link href="http://blog.hamobai.com/2014/08/31/docker-analysis-2/"/>
    <updated>2014-08-31T12:30:00+08:00</updated>
    <id>http://blog.hamobai.com/2014/08/31/docker-analysis-2</id>
    <content type="html"><![CDATA[<p>在该系列的
<a href="http://blog.hamobai.com/2014/08/29/docker-analysis-1/">上一篇文章</a>中，
我们简单介绍了Docker的基本信息。在这篇文章中，我们将详细分析Docker
daemon的启动代码。从这篇文章开始，我将用<code>$SRC</code>指代Docker源码所在的
目录。</p>

<!--more-->


<h3>启动入口</h3>

<p>Docker的启动入口位于<code>$SRC/docker</code>目录，在分析代码之前，先介绍Golang的一个小知识。Golang的每一个package，都可以有零个，一个或者多个<code>func init()</code>，多个init函数会按照它们在源文件中出现的顺序被执行。除<code>main</code>pakcage外，init函数在package被import的时候执行；而对于<code>main</code>pakcage，其<code>func init()</code>将在程序启动时，先于<code>func main()</code>被执行。[1]</p>

<p> <code>$SRC/docker</code>目录下共有4个文件，<code>flags.go</code> <code>docker.go</code>
 <code>daemon.go</code>以及<code>client.go</code>。</p>

<p> <code>flags.go</code>包含对于daemon和client都生效的命令行参数。主要是设定
client与daemon之间通讯方式相关的参数。当然，决定该次<code>docker</code>作为
client还是daemon运行的<code>-d</code>参数也在flags.go文件中被定义。具体如下：
<code>go
    flDaemon      = flag.Bool([]string{"d", "-daemon"}, false, "Enable daemon mode")
</code>
这样，当我们用参数<code>-d</code>或者<code>--daemon</code>调用<code>docker</code>时，
 <code>flDaemon</code>会被置为<code>true</code>（默认值为<code>false</code>），从而影响后序
 代码的执行。
 这里要注意的是，Golang的flag对所有参数都是默认使用<code>-</code>指定的，所以
 绑定在<code>flDaemon</code>上的长参数，Docker选择了<code>-daemon</code>。这样，我们
 才可以按照Unix的惯例，使用<code>-</code>指定短参数，使用<code>--</code>指定长参数。</p>

<p>接下来，执行会进入到真正的入口函数<code>func main()</code>，该函数位于
 <code>$SRC/docker/docker.go</code>文件中。首先会被调用的是
 <code>reexec.init()</code>，其作用是实现类似busybox的程序调用，即根据文件名
 决定程序的功能。这里暂且不表，有兴趣的同学可以自行研究<code>reexec</code>
 package的源码，代码位于<code>$SRC/reexec</code>目录下。</p>

<p>在完成对命令行参数使用<code>flag.Parse()</code>的解析后，首先会判断是否使用了
 <code>-v</code>或<code>--version</code>参数，之后会根据<code>flDebug</code>的值设置
 <code>DEBUG</code>环境变量，在Docker中，很多类似debug这样的全局设置都是通过
 环境变量传递的，这样做的好处是简化程序对该设置的处理，当需要修改或获
 取该项设置时，直接访问环境变量即可；坏处也显而易见，程序容易受到运行
 时已经定义的环境变量的影响。</p>

<p>如果用户没有通过命令行参数指定daemon与client的连接方式，则会检查
 <code>DOCKER_HOST</code>环境变量，如果环境变量也没有指定，则将unix
 socket <code>unix:///var/run/docker.sock</code> 作为默认的连接方式压入
 <code>flHosts</code>变量。之后，因为我们以<code>-d</code>或者<code>--daemon</code>参数启动
 <code>docker</code>，<code>flDaemon</code>变量为<code>true</code>，我们会进入
 <code>mainDaemon</code>函数进行daemon相关的动作。该函数位于
 <code>$SRC/docker/daemon.go</code>。</p>

<p>进入<code>daemon.go</code>，首先会利用之前提过的<code>init()</code>注册daemon所
需要的flag，并通过引用其他package，调用各个package的<code>init()</code>函数。
这里需要着重介绍的是如下代码：
<code>go
import (
    _ "github.com/docker/docker/daemon/execdriver/lxc"
    _ "github.com/docker/docker/daemon/execdriver/native"
)
</code>
在import package时，如果将包名重新定义为<code>_</code>，则该package无法在后面
 的代码中被调用（Golang不允许引用而不被调用的包存在）。引用一个包再将其
 重命名为<code>_</code>，其目的就是为了调用该包自己的<code>func init()</code>。比如这
 里，lxc和native就各自利用各自的<code>init</code>函数注册了一个reexec项，为
 <code>/.dockerinit</code>和<code>native</code>设置各自的动作。而具体以这两个名字作为
 文件名运行docker程序时会有什么不同，我们会在以后的章节中介绍。</p>

<p>言归正传，在daemon的<code>init()</code>函数中注册的flag位于
 <code>$SRC/daemon/config.go</code>，由于当前文件也属于main包，这些flag实际上
 在程序运行一开始就已经被注册，并不是在进入到<code>mainDaemon</code>函数后才
 被注册的。现在的叙述方法只是为了更清楚的描述代码的结构。为了简单起见，
 接下来的分析都基于默认参数， 有兴趣的同学可以自行研究一下daemon都支持
 那些参数，各自的含义是什么。</p>

<p>接下来，我们将进入daemon部分最核心的代码engine，engine代码位于
 <code>$SRC/engine</code>目录下。engine将所有操作封装在其内部，通过其
 <code>Register</code>方法向engine注册操作。engine内部还封装了标准输入，输出
 及错误流，以及操作之间相互同步的工具。简而言之，engine是所有操作运行
 的容器。</p>

<p><code>mainDaemon</code>函数首先会调用<code>engine.New()</code>生成一个全新的engine，
注册一个<code>commands</code>操作，其作用是按字典顺序显示所有已经注册过的操作。
并将所有已经注册过的操作写入这个新生成的engine里。</p>

<p>再之后，会通过<code>signal.Trap()</code>函数将<code>os.Interrupt</code>
 <code>syscall.SIGTERM</code>等信号绑定到新生成的engine的Shutdown成员上。这样
 当daemon收到以上信号时，engine可以得到通知并进行相应的操作。</p>

<p>再之后，<code>builtins.Register()</code>函数会向engine中注册如下操作：</p>

<ul>
<li>initnetworkdriver -> bridge.InitDriver</li>
<li>serveapi -> apiserver.ServeApi</li>
<li>acceptconnections -> apiserver.AcceptConnections</li>
<li>events -> Events.Get</li>
<li>log -> Events.Log</li>
<li>subscriberscount -> Events.SubscribersCount</li>
<li>version -> builtins.dockerVersion</li>
<li>auth -> registry.Service.Auth</li>
<li>search -> registry.Service.Search</li>
</ul>


<p>这里不加介绍的列出builtins注册的每个操作及其对应的函数，我们会在具体用
到他们的时候再详细介绍。</p>

<p>再之后的流程会分成两部分，一部分用来初始化和启动RESTful API，但并不接
受连接；另一部分用来初始化daemon的服务，并在初始化结束后设置RESTful
API可以接受新连接。这样即可加快启动的速度，同时也可以保证当daemon可以
接受API连接时，daemon处于就绪状态。</p>

<p>我们将会在
<a href="http://blog.hamobai.com/2014/09/12/docker-analysis-3/">下一篇文章</a>中
详细介绍daemon服务和RESTful API服务的启动过程。</p>

<p>[1]<a href="http://golang.org/ref/spec#Package_initialization">http://golang.org/ref/spec#Package_initialization</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker源码分析1-简介]]></title>
    <link href="http://blog.hamobai.com/2014/08/29/docker-analysis-1/"/>
    <updated>2014-08-29T17:31:00+08:00</updated>
    <id>http://blog.hamobai.com/2014/08/29/docker-analysis-1</id>
    <content type="html"><![CDATA[<p>Docker是一款由docker, Inc发起的开源Linux容器引擎。由Golang编写完成。它
基于Linux Container技术。Linux Container技术，是一种操作系统层次的虚拟
化技术，提供了系统隔离，资源限制等功能。与Linux下传统的KVM虚拟机相比，
container技术更轻量，所有容器运行在Host的内核上，共享Host的硬件资源。</p>

<p>由于Docker依赖于Linux Container技术，所以现在只能运行在Linux系统上。为
了解决这个问题，
<a href="https://github.com/boot2docker/boot2docker">boot2docker</a>项目应运而生。
该项目为Windows和Mac OS的用户提供了一个包含Docker的最小化的Virtualbox
虚拟机镜像，借助Virtualbox虚拟机让Docker运行在这两种操作系统上。</p>

<p>本系列的Docker源码分析将基于Docker v1.2.0版本进行。读者可以从Docker项
目在github的<a href="https://github.com/dotcloud/docker">页面</a>获取到该项目的源
代码。</p>

<p><a href="http://blog.hamobai.com/2014/08/30/docker-analysis-2/">下一篇</a>，我们将首先对Docker daemon的启动代码进行分析。</p>
]]></content>
  </entry>
  
</feed>
